{"version":3,"sources":["download_xml.js","maps.js","scripts.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"scripts.min.js","sourcesContent":["/**\n* Returns an XMLHttp instance to use for asynchronous\n* downloading. This method will never throw an exception, but will\n* return NULL if the browser does not support XmlHttp for any reason.\n* @return {XMLHttpRequest|Null}\n*/\n\nfunction createXmlHttpRequest() {\n try {\n   if (typeof ActiveXObject != 'undefined') {\n     return new ActiveXObject('Microsoft.XMLHTTP');\n   } else if (window[\"XMLHttpRequest\"]) {\n     return new XMLHttpRequest();\n   }\n } catch (e) {\n   changeStatus(e);\n }\n return null;\n};\n\n/**\n* This functions wraps XMLHttpRequest open/send function.\n* It lets you specify a URL and will call the callback if\n* it gets a status code of 200.\n* @param {String} url The URL to retrieve\n* @param {Function} callback The function to call once retrieved.\n*/\nfunction downloadUrl(url, callback) {\n\n var status = -1;\n var request = createXmlHttpRequest();\n if (!request) {\n   return false;\n }\n\n request.onreadystatechange = function() {\n   if (request.readyState == 4) {\n     try {\n       status = request.status;\n     } catch (e) {\n       // Usually indicates request timed out in FF.\n     }\n     if ((status == 200) || (status == 0)) {\n       callback(request.responseText, request.status);\n       request.onreadystatechange = function() {};\n     }\n   }\n }\n request.open('GET', url, true);\n try {\n   request.send(null);\n } catch (e) {\n   changeStatus(e);\n }\n};\n\n/**\n * Parses the given XML string and returns the parsed document in a\n * DOM data structure. This function will return an empty DOM node if\n * XML parsing is not supported in this browser.\n * @param {string} str XML string.\n * @return {Element|Document} DOM.\n */\nfunction xmlParse(str) {\n  if (typeof ActiveXObject != 'undefined' && typeof GetObject != 'undefined') {\n    var doc = new ActiveXObject('Microsoft.XMLDOM');\n    doc.loadXML(str);\n    return doc;\n  }\n\n  if (typeof DOMParser != 'undefined') {\n    return (new DOMParser()).parseFromString(str, 'text/xml');\n  }\n\n  return createElement('div', null);\n}\n\n/**\n * Appends a JavaScript file to the page.\n * @param {string} url\n */\nfunction downloadScript(url) {\n  var script = document.createElement('script');\n  script.src = url;\n  document.body.appendChild(script);\n}\n","// rowContent = the result for each marker, gmarkers = markers\nvar rowContent = \"\";\nvar gmarkers = [];\n// global vars\nvar map = null;\nvar circle = null;\nvar geocoder = new google.maps.Geocoder();\n// Setup create amrker function to use with XML - pass through each info type you want to pull in later...\nfunction createMarker(latlng,name,maintitle,html,bedrooms,address,price) {\n  // content for infowindow\n  var contentString =  '<strong>' + maintitle + '</strong><br><br>' +\n                       '<span>Address:' + address +  '</span><br>' +\n                       '<span>Bedrooms:' + maintitle + '</span><br>' +\n                       '<p>' + html + '</p>';\n  var marker = new google.maps.Marker({\n     position: latlng,\n     // map: map,\n     title: name,\n     maintitle: maintitle,\n     bedrooms: bedrooms,\n     address: address,\n     price: price,\n     xcontent: html,\n     //name: name,\n     zIndex: Math.round(latlng.lat()*-100000)<<5\n  });\n  google.maps.event.addListener(marker, 'click', function() {\n     infowindow.setContent(contentString);\n     infowindow.open(map,marker);\n   });\n  // save the info we need to use later for the side_bar\n  gmarkers.push(marker);\n}\n// Search.php will use the initialize function to cretae and build map\nfunction initialize() {\n  jQuery([document.documentElement, document.body]).animate({\n       scrollTop: jQuery(\"#results_search\").offset().top\n   }, 1000);\n\n  // remove \"?\" from query\n  var query = location.search.substring(1);\n  // split url arguments up via & to be able to cycle through all of them\n  var pairs = query.split(\"&\");\n  for (var i=0; i<pairs.length; i++) {\n  // separate the argument and value for two separate vars\n  var pos = pairs[i].indexOf(\"=\");\n  var argname = pairs[i].substring(0,pos).toLowerCase();\n  var value = pairs[i].substring(pos+1).toLowerCase();\n    // process each possible argname  -  use unescape() to get rid of any spaces.\n    if (argname == \"radius\") {\n      document.getElementById(\"radius\").value = unescape(value);\n      codeAddress();\n    }\n    if (argname == \"address\") {\n      document.getElementById(\"address\").value = unescape(value);\n      codeAddress();\n    }\n  }\n  // create the map\n  var myOptions = {\n   zoom: 8,\n   center: new google.maps.LatLng(53.481308,-2.242336),\n   mapTypeControl: true,\n   mapTypeControlOptions: {style: google.maps.MapTypeControlStyle.DROPDOWN_MENU},\n   navigationControl: true,\n   mapTypeId: google.maps.MapTypeId.ROADMAP\n  }\n  map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);\n  // Read the XML data using function in download_xml.js - downloadURL()\n  downloadUrl(\"markers.xml\", function(doc) {\n    var xmlDoc = xmlParse(doc);\n    var markers = xmlDoc.documentElement.getElementsByTagName(\"marker\");\n\n    var bedroom_input = document.getElementById('bedroom_number').value;\n\n    for (var i = 0; i < markers.length; i++) {\n      // obtain the attribues of each marker\n      var lat = parseFloat(markers[i].getAttribute(\"lat\"));\n      var lng = parseFloat(markers[i].getAttribute(\"lng\"));\n      var point = new google.maps.LatLng(lat,lng);\n      var id = markers[i].getAttribute(\"id\");\n\n      var maintitle = markers[i].getAttribute(\"title\");\n      var bedroomsno = markers[i].getAttribute(\"bedrooms\");\n      var html= markers[i].getAttribute(\"content\");\n      var address = markers[i].getAttribute(\"address\");\n      var price = markers[i].getAttribute(\"price\");\n      // create the marker\n      if(bedroom_input >= bedroomsno) {\n        var marker = createMarker(point,id,maintitle,html,bedroomsno,address,price);\n      }\n    }\n  });\n}\n// Create marker and information based on input\nfunction codeAddress() {\n  // get location of search\n  var address = document.getElementById('address').value;\n  // get radius of search\n  var radius = parseInt(document.getElementById('radius').value, 10)*1000;\n  geocoder.geocode( { 'address': address}, function(results, status) {\n  if (status == google.maps.GeocoderStatus.OK) {\n    map.setCenter(results[0].geometry.location);\n    var searchCenter = results[0].geometry.location;\n    if (circle) circle.setMap(null);\n    circle = new google.maps.Circle({\n      center:searchCenter,\n      radius: radius,\n      fillOpacity: 0.30,\n      strokeColor: '#F7AE47',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#F7AE47\",\n      map: map\n    });\n    var bounds = new google.maps.LatLngBounds();\n    var foundMarkers = 0;\n    for (var i=0; i<gmarkers.length;i++) {\n      if (google.maps.geometry.spherical.computeDistanceBetween(gmarkers[i].getPosition(),searchCenter) < radius) {\n        // create content for feed\n        var contentPop =  '<div class=\"itemWrapper\">' +\n                          '<div class=\"img_wrapper\"></div>' +\n                          '<div class=\"content_wrapper\">' +\n                          '<div class=\"bg_inner\">' +\n                          '<span>Development Found</span>' +\n                          '<h3>' + gmarkers[i].maintitle + '</h3>' +\n                          '<h4 class=\"location_title\">' + gmarkers[i].address + '</h4>' +\n                          '<h4 class=\"price_title\">' + gmarkers[i].bedrooms + ' bed home from Â£' + gmarkers[i].price + '</h4>' +\n                          '<p>' + gmarkers[i].xcontent + '</p>' +\n                          '<a href=\"#\" class=\"btn_ywllow_mre_brder\">View development</a>' +\n                          '</div>' +\n                          '</div>' +\n                          '</div>';\n        bounds.extend(gmarkers[i].getPosition())\n        // show marker if in radius\n        gmarkers[i].setMap(map);\n        // setup content\n        rowContent += contentPop;\n        foundMarkers++;\n       } else {\n         // remove marker if not found in radius\n         gmarkers[i].setMap(null);\n       }\n     }\n     // put the assembled side_bar_html contents into the side_bar div\n     document.getElementById(\"found_results\").innerHTML = rowContent;\n   } else {\n     alert('Geocode was not successful for the following reason: ' + status);\n   }\n });\n}\n// Infowindow (onclick)\nvar infowindow = new google.maps.InfoWindow({\n size: new google.maps.Size(150,50)\n});\n// Autocomplete address field - resticted to UK\nvar input = document.getElementById('address');\nvar options = {\n   componentRestrictions: {country: 'uk'}\n};\nautocomplete = new google.maps.places.Autocomplete(input,options);\n","jQuery(document).ready(function($) {\n  // loader\n  $(window).on('load', function(){\n    $(\".overlay_map_result\").delay(825).fadeOut(\"625\");\n  });\n  // header collapse\n  $(window).scroll(function() {\n    var scroll = $(window).scrollTop();\n    if (scroll >= 20) {\n      $(\"header\").addClass(\"collapsed_header\");\n    } else {\n      $(\"header\").removeClass(\"collapsed_header\");\n    }\n  });\n});\n"]}